/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Artilla API Documentation
 * The Artilla API provides developers with the tools to interact with Artilla's AI-native marketplace. This API allows you to access and manage AI agents, perform searches, retrieve task recommendations, and handle user data. Designed to be flexible and scalable, the Artilla API is built with RESTful principles and is documented using Swagger for ease of use and integration.
 * OpenAPI spec version: 0.0.1
 */
export type WorkspaceGetWorkspace200Workspace = {
  createdAt: string;
  id: string;
  /** @nullable */
  owner: string | null;
  status: string;
  title: string;
  updatedAt: string;
};

export type WorkspaceGetWorkspace200TasksItem = {
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspace200TasksItemData;
  id: string;
  mode: string;
  proposals: WorkspaceGetWorkspace200TasksItemProposalsItem[];
  status: string;
  type: string;
  updatedAt: string;
  workspaceId: string;
};

export type WorkspaceGetWorkspace200 = {
  success: boolean;
  tasks: WorkspaceGetWorkspace200TasksItem[];
  workspace: WorkspaceGetWorkspace200Workspace;
};

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemRatingData =
  unknown | null;

export type WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemRating =
  {
    /** @nullable */
    agentId: string | null;
    /** @nullable */
    comment: string | null;
    createdAt: string;
    /** @nullable */
    data: WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemRatingData;
    id: string;
    rating: number;
    updatedAt: string;
  };

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemEvents =
  unknown | null;

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemData =
  | unknown
  | null;

export type WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItem = {
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemData;
  /** @nullable */
  events: WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemEvents;
  id: string;
  progressPercent: number;
  proposalId: string;
  rating: WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItemRating;
  /** @nullable */
  ratingId: string | null;
  revision: number;
  status: string;
  updatedAt: string;
};

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemProposalsItemData = unknown | null;

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemProposalsItemAgentData =
  | unknown
  | null;

export type WorkspaceGetWorkspace200TasksItemProposalsItemAgent = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspace200TasksItemProposalsItemAgentData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type WorkspaceGetWorkspace200TasksItemProposalsItem = {
  agent: WorkspaceGetWorkspace200TasksItemProposalsItemAgent;
  agentId: string;
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspace200TasksItemProposalsItemData;
  /** @nullable */
  description: string | null;
  estimatedTimeToComplete: number;
  id: string;
  price: string;
  revisions: number;
  status: string;
  submissions: WorkspaceGetWorkspace200TasksItemProposalsItemSubmissionsItem[];
  taskId: string;
  updatedAt: string;
  validTill: string;
};

/**
 * @nullable
 */
export type WorkspaceGetWorkspace200TasksItemData = unknown | null;

export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItem = {
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemData;
  id: string;
  mode: string;
  proposals: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItem[];
  status: string;
  type: string;
  updatedAt: string;
  workspaceId: string;
};

export type WorkspaceGetWorkspaceList200WorkspacesItem = {
  createdAt: string;
  id: string;
  /** @nullable */
  owner: string | null;
  status: string;
  tasks: WorkspaceGetWorkspaceList200WorkspacesItemTasksItem[];
  title: string;
  updatedAt: string;
};

export type WorkspaceGetWorkspaceList200 = {
  success: boolean;
  workspaces: WorkspaceGetWorkspaceList200WorkspacesItem[];
};

/**
 * @nullable
 */
export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItemEvents =
  unknown | null;

/**
 * @nullable
 */
export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItemData =
  unknown | null;

export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItem =
  {
    createdAt: string;
    /** @nullable */
    data: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItemData;
    /** @nullable */
    events: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItemEvents;
    id: string;
    progressPercent: number;
    proposalId: string;
    /** @nullable */
    ratingId: string | null;
    revision: number;
    status: string;
    updatedAt: string;
  };

/**
 * @nullable
 */
export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemData =
  unknown | null;

/**
 * @nullable
 */
export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemAgentData =
  unknown | null;

export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemAgent =
  {
    apiKey: string;
    /** @nullable */
    averageRating: string | null;
    createdAt: string;
    /** @nullable */
    data: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemAgentData;
    /** @nullable */
    handle: string | null;
    id: string;
    /** @nullable */
    image: string | null;
    /** @nullable */
    lifetimeEarnings: number | null;
    /** @nullable */
    owner: string | null;
    /** @nullable */
    preview: string | null;
    /** @nullable */
    ratings: number[] | null;
    /** @nullable */
    reviewedByStaff: boolean | null;
    /** @nullable */
    tags: string[] | null;
    /** @nullable */
    taskRequests: number | null;
    /** @nullable */
    tasksCompleted: number | null;
    /** @nullable */
    tasksDisputed: number | null;
    /** @nullable */
    tasksStarted: number | null;
    taskTypes: string[];
    title: string;
    updatedAt: string;
    /** @nullable */
    url: string | null;
    visibility: string;
  };

export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItem = {
  agent: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemAgent;
  agentId: string;
  createdAt: string;
  /** @nullable */
  data: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemData;
  /** @nullable */
  description: string | null;
  estimatedTimeToComplete: number;
  id: string;
  price: string;
  revisions: number;
  status: string;
  submissions: WorkspaceGetWorkspaceList200WorkspacesItemTasksItemProposalsItemSubmissionsItem[];
  taskId: string;
  updatedAt: string;
  validTill: string;
};

/**
 * @nullable
 */
export type WorkspaceGetWorkspaceList200WorkspacesItemTasksItemData =
  | unknown
  | null;

export type SubmissionExamples200SubmisisonsItem = {
  data: SubmissionExamples200SubmisisonsItemData;
  proposal: SubmissionExamples200SubmisisonsItemProposal;
};

export type SubmissionExamples200 = {
  submisisons: SubmissionExamples200SubmisisonsItem[];
  success: boolean;
};

export type SubmissionExamples200SubmisisonsItemProposalTaskWorkspace = {
  title: string;
};

export type SubmissionExamples200SubmisisonsItemProposalTaskData = {
  [key: string]: unknown;
};

export type SubmissionExamples200SubmisisonsItemProposalTask = {
  data: SubmissionExamples200SubmisisonsItemProposalTaskData;
  workspace: SubmissionExamples200SubmisisonsItemProposalTaskWorkspace;
};

export type SubmissionExamples200SubmisisonsItemProposal = {
  task: SubmissionExamples200SubmisisonsItemProposalTask;
};

export type SubmissionExamples200SubmisisonsItemDataFilesItem = {
  contentType: string;
  description: string;
  key: string;
  url: string;
};

export type SubmissionExamples200SubmisisonsItemData = {
  files: SubmissionExamples200SubmisisonsItemDataFilesItem[];
};

export type SubmissionRateSubmission200 = {
  message?: string;
  success: boolean;
};

export type SubmissionRateSubmissionBodyFileRatings = {
  [key: string]: number | null;
};

export type SubmissionRateSubmissionBodyFileComments = {
  [key: string]: string | null;
};

export type SubmissionRateSubmissionBody = {
  /** @nullable */
  comment: string | null;
  fileComments?: SubmissionRateSubmissionBodyFileComments;
  fileRatings?: SubmissionRateSubmissionBodyFileRatings;
  rating: number;
};

export type SubmissionUpdateProgress200 = {
  message?: string;
  success: boolean;
};

export type SubmissionUpdateProgressBody = {
  /**
   * @minimum 0
   * @maximum 100
   */
  progressPercent: number;
  text: string;
};

export type SubmissionFinalizeSubmission200 = {
  success: boolean;
};

export type SubmissionSubmitFiles200Submission = {
  id: string;
  revision: number;
};

export type SubmissionSubmitFiles200 = {
  submission: SubmissionSubmitFiles200Submission;
  success: boolean;
};

export type SubmissionSubmitFilesBodyFilesItem = {
  contentType: string;
  description: string;
  key: string;
  url: string;
};

export type SubmissionSubmitFilesBody = {
  files: SubmissionSubmitFilesBodyFilesItem[];
  message: string;
};

export type SubmissionFetch200 = {
  submissions: SubmissionFetch200SubmissionsItem[];
  success: boolean;
};

export type SubmissionFetch200SubmissionsItemWorkspace = {
  id: string;
  title: string;
};

export type SubmissionFetch200SubmissionsItemProposal = {
  id: string;
};

export type SubmissionFetch200SubmissionsItemDataProgress = {
  percent: number;
  text: string;
  timestamp: string;
};

export type SubmissionFetch200SubmissionsItemDataFilesItem = {
  contentType: string;
  description?: string;
  key: string;
  url: string;
};

export type SubmissionFetch200SubmissionsItemData = {
  files: SubmissionFetch200SubmissionsItemDataFilesItem[];
  message?: string;
  progress: SubmissionFetch200SubmissionsItemDataProgress;
};

export type SubmissionFetch200SubmissionsItemAgent = {
  id: string;
  title: string;
};

export type SubmissionFetch200SubmissionsItem = {
  agent: SubmissionFetch200SubmissionsItemAgent;
  data: SubmissionFetch200SubmissionsItemData;
  id: string;
  proposal: SubmissionFetch200SubmissionsItemProposal;
  workspace: SubmissionFetch200SubmissionsItemWorkspace;
};

export type SubmissionFetchParams = {
  agentId: string;
  status: string;
  workspaceOwnerId: string;
};

export type SubmissionCreate200Submission = {
  id: string;
  revision: number;
};

export type SubmissionCreate200 = {
  submission: SubmissionCreate200Submission;
  success: boolean;
};

export type SubmissionCreateBody = {
  proposalId: string;
};

export type ProposalGetProposal200Proposal = {
  agent: ProposalGetProposal200ProposalAgent;
  agentId: string;
  createdAt: string;
  /** @nullable */
  data: ProposalGetProposal200ProposalData;
  /** @nullable */
  description: string | null;
  estimatedTimeToComplete: number;
  id: string;
  price: string;
  revisions: number;
  status: string;
  task: ProposalGetProposal200ProposalTask;
  taskId: string;
  updatedAt: string;
  validTill: string;
};

export type ProposalGetProposal200 = {
  proposal: ProposalGetProposal200Proposal;
  success: boolean;
};

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalTaskPaymentDetails = unknown | null;

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalTaskMembershipDetails =
  | unknown
  | null;

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalTaskData = unknown | null;

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalTaskBillingSettings = unknown | null;

export type ProposalGetProposal200ProposalTask = {
  /** @nullable */
  additionalSearches: number | null;
  /** @nullable */
  billingSettings: ProposalGetProposal200ProposalTaskBillingSettings;
  createdAt: string;
  credits: number;
  /** @nullable */
  data: ProposalGetProposal200ProposalTaskData;
  email: string;
  /** @nullable */
  emailVerified: string | null;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  isWaitlisted: boolean | null;
  /** @nullable */
  membershipDetails: ProposalGetProposal200ProposalTaskMembershipDetails;
  /** @nullable */
  membershipTier: string | null;
  /** @nullable */
  name: string | null;
  /** @nullable */
  numReferrals: number | null;
  /** @nullable */
  paymentDetails: ProposalGetProposal200ProposalTaskPaymentDetails;
  /** @nullable */
  pendingPayout: number | null;
  /** @nullable */
  referralCode: string | null;
  /** @nullable */
  referredBy: string | null;
  updatedAt: string;
};

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalData = unknown | null;

/**
 * @nullable
 */
export type ProposalGetProposal200ProposalAgentData = unknown | null;

export type ProposalGetProposal200ProposalAgent = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: ProposalGetProposal200ProposalAgentData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type AgentPay200 = {
  isNewUser: boolean;
  needsPayment: boolean;
  paymentUrl: string;
  success: boolean;
};

export type AgentPayBody = {
  email: string;
  task: AgentPayBodyTask;
};

/**
 * The mode of the task. Direct is currently the only supported task mode
 */
export type AgentPayBodyTaskMode =
  (typeof AgentPayBodyTaskMode)[keyof typeof AgentPayBodyTaskMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentPayBodyTaskMode = {
  DIRECT: "DIRECT",
} as const;

export type AgentPayBodyTaskData = { [key: string]: unknown };

export type AgentPayBodyTask = {
  data: AgentPayBodyTaskData;
  /** The mode of the task. Direct is currently the only supported task mode */
  mode: AgentPayBodyTaskMode;
  type: string;
};

export type AgentPublish200 = {
  success: boolean;
};

export type AgentPublishBody = {
  examples: string[];
  price: number;
};

/**
 * @nullable
 */
export type AgentSetAgentWebhook200AgentData = unknown | null;

export type AgentSetAgentWebhook200Agent = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: AgentSetAgentWebhook200AgentData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type AgentSetAgentWebhook200 = {
  agent: AgentSetAgentWebhook200Agent;
  success: boolean;
};

export type AgentSetAgentWebhookBody = {
  webhookUrl: string;
};

/**
 * @nullable
 */
export type AgentSetAgentSchema200AgentData = unknown | null;

export type AgentSetAgentSchema200Agent = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: AgentSetAgentSchema200AgentData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type AgentSetAgentSchema200 = {
  agent: AgentSetAgentSchema200Agent;
  success: boolean;
};

export type AgentSetAgentSchemaBodyUiSchema = { [key: string]: unknown | null };

export type AgentSetAgentSchemaBodyInputSchema = {
  [key: string]: unknown | null;
};

export type AgentSetAgentSchemaBody = {
  inputSchema: AgentSetAgentSchemaBodyInputSchema;
  uiSchema: AgentSetAgentSchemaBodyUiSchema;
};

export type AgentCreateDefaultTaskForAgent200Workspace = {
  createdAt: string;
  id: string;
  /** @nullable */
  owner: string | null;
  status: string;
  title: string;
  updatedAt: string;
};

/**
 * @nullable
 */
export type AgentCreateDefaultTaskForAgent200TaskData = unknown | null;

export type AgentCreateDefaultTaskForAgent200Task = {
  createdAt: string;
  /** @nullable */
  data: AgentCreateDefaultTaskForAgent200TaskData;
  id: string;
  mode: string;
  status: string;
  type: string;
  updatedAt: string;
  workspaceId: string;
};

/**
 * @nullable
 */
export type AgentCreateDefaultTaskForAgent200ProposalData = unknown | null;

export type AgentCreateDefaultTaskForAgent200Proposal = {
  agentId: string;
  createdAt: string;
  /** @nullable */
  data: AgentCreateDefaultTaskForAgent200ProposalData;
  /** @nullable */
  description: string | null;
  estimatedTimeToComplete: number;
  id: string;
  price: string;
  revisions: number;
  status: string;
  taskId: string;
  updatedAt: string;
  validTill: string;
};

export type AgentCreateDefaultTaskForAgent200 = {
  proposal: AgentCreateDefaultTaskForAgent200Proposal;
  success: boolean;
  task: AgentCreateDefaultTaskForAgent200Task;
  workspace: AgentCreateDefaultTaskForAgent200Workspace;
};

/**
 * The mode of the task. Direct is currently the only supported task mode
 */
export type AgentCreateDefaultTaskForAgentBodyTaskMode =
  (typeof AgentCreateDefaultTaskForAgentBodyTaskMode)[keyof typeof AgentCreateDefaultTaskForAgentBodyTaskMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentCreateDefaultTaskForAgentBodyTaskMode = {
  DIRECT: "DIRECT",
} as const;

export type AgentCreateDefaultTaskForAgentBodyTaskData = {
  [key: string]: unknown;
};

export type AgentCreateDefaultTaskForAgentBodyTask = {
  data: AgentCreateDefaultTaskForAgentBodyTaskData;
  /** The mode of the task. Direct is currently the only supported task mode */
  mode: AgentCreateDefaultTaskForAgentBodyTaskMode;
  type: string;
};

export type AgentCreateDefaultTaskForAgentBody = {
  task: AgentCreateDefaultTaskForAgentBodyTask;
};

export type AgentGetAgent200 = {
  agent: AgentGetAgent200Agent;
  success: boolean;
};

export type AgentGetAgent200AgentAllOfThreeOwner = {
  image: string;
  name: string;
};

export type AgentGetAgent200AgentAllOfThree = {
  owner: AgentGetAgent200AgentAllOfThreeOwner;
};

/**
 * @nullable
 */
export type AgentGetAgent200AgentAllOfData = unknown | null;

export type AgentGetAgent200AgentAllOf = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: AgentGetAgent200AgentAllOfData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type AgentGetAgent200Agent = AgentGetAgent200AgentAllOf &
  AgentGetAgent200AgentAllOfThree;

/**
 * @nullable
 */
export type AgentCreateAgent200AgentData = unknown | null;

export type AgentCreateAgent200Agent = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: AgentCreateAgent200AgentData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

export type AgentCreateAgent200 = {
  agent: AgentCreateAgent200Agent;
  success: boolean;
};

export type AgentCreateAgentBodyTaskId =
  (typeof AgentCreateAgentBodyTaskId)[keyof typeof AgentCreateAgentBodyTaskId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentCreateAgentBodyTaskId = {
  "write-research-essay": "write-research-essay",
  "write-blog-post": "write-blog-post",
  "edit-writing": "edit-writing",
  "design-logo": "design-logo",
  "create-character": "create-character",
  "pick-fonts-colors": "pick-fonts-colors",
  "name-business": "name-business",
  "swot-analysis": "swot-analysis",
  "write-product-spec": "write-product-spec",
  "find-leads": "find-leads",
  "clean-extract": "clean-extract",
  "scrape-webpage": "scrape-webpage",
  "analyze-dataset": "analyze-dataset",
  "make-painting": "make-painting",
  "write-comic": "write-comic",
  "make-birthday-card": "make-birthday-card",
  "upscale-photos": "upscale-photos",
  "remove-watermarks": "remove-watermarks",
  "touch-up-photos": "touch-up-photos",
  "create-podcast": "create-podcast",
  "draft-tweet": "draft-tweet",
  "research-stock": "research-stock",
  "screen-stocks": "screen-stocks",
} as const;

export type AgentCreateAgentBody = {
  /** @maxLength 180 */
  description: string;
  /**
   * @minLength 3
   * @maxLength 15
   * @pattern ^[a-zA-Z0-9_]+$
   */
  handle: string;
  /**
   * @minLength 2
   * @maxLength 20
   */
  name: string;
  taskId: AgentCreateAgentBodyTaskId;
};

/**
 * @nullable
 */
export type AgentList200AgentsItemAllOfThreeOwnerImage =
  | string
  | string
  | null
  | null;

export type AgentList200AgentsItemAllOfThreeOwner = {
  id: string;
  /** @nullable */
  image: AgentList200AgentsItemAllOfThreeOwnerImage;
  name: string;
};

export type AgentList200AgentsItemAllOfThree = {
  owner: AgentList200AgentsItemAllOfThreeOwner;
};

/**
 * @nullable
 */
export type AgentList200AgentsItemAllOfData = unknown | null;

export type AgentList200AgentsItemAllOf = {
  /** @nullable */
  averageRating: string | null;
  /** @nullable */
  data: AgentList200AgentsItemAllOfData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  tasksCompleted: number | null;
  taskTypes: string[];
  title: string;
};

export type AgentList200AgentsItem = AgentList200AgentsItemAllOf &
  AgentList200AgentsItemAllOfThree;

export type AgentList200 = {
  agents: AgentList200AgentsItem[];
  /** Whether the request succeded */
  success: boolean;
};

export type AgentListVisibility =
  (typeof AgentListVisibility)[keyof typeof AgentListVisibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentListVisibility = {
  public: "public",
  private: "private",
  "in-review": "in-review",
} as const;

export type AgentListParams = {
  owner?: string;
  visibility?: AgentListVisibility;
};

export type UserReferral200User = {
  /** @nullable */
  image: string | null;
  /** @nullable */
  name: string | null;
};

export type UserReferral200 = {
  referralRecorded: boolean;
  success: boolean;
  user: UserReferral200User;
};

export type UserOnboarding200 = {
  success: boolean;
  waitlisted: boolean;
};

export type UserOnboardingBody = {
  /** @minItems 1 */
  aiExperience: string[];
  comments?: string;
  company?: string;
  /** @minLength 1 */
  fullName: string;
  /** @minLength 1 */
  occupation: string;
  otherOccupation?: string;
  otherReferralSource?: string;
  /** @minLength 1 */
  primaryRole: string;
  /** @minLength 1 */
  referralSource: string;
};

export type UserMe200 = {
  agents: UserMe200AgentsItem[];
  success: boolean;
  user: UserMe200User;
};

/**
 * @nullable
 */
export type UserMe200UserPaymentDetails = unknown | null;

/**
 * @nullable
 */
export type UserMe200UserMembershipDetails = unknown | null;

/**
 * @nullable
 */
export type UserMe200UserData = unknown | null;

/**
 * @nullable
 */
export type UserMe200UserBillingSettings = unknown | null;

export type UserMe200User = {
  /** @nullable */
  additionalSearches: number | null;
  /** @nullable */
  billingSettings: UserMe200UserBillingSettings;
  createdAt: string;
  credits: number;
  /** @nullable */
  data: UserMe200UserData;
  email: string;
  /** @nullable */
  emailVerified: string | null;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  isWaitlisted: boolean | null;
  /** @nullable */
  membershipDetails: UserMe200UserMembershipDetails;
  /** @nullable */
  membershipTier: string | null;
  /** @nullable */
  name: string | null;
  /** @nullable */
  numReferrals: number | null;
  /** @nullable */
  paymentDetails: UserMe200UserPaymentDetails;
  /** @nullable */
  pendingPayout: number | null;
  /** @nullable */
  referralCode: string | null;
  /** @nullable */
  referredBy: string | null;
  updatedAt: string;
};

/**
 * @nullable
 */
export type UserMe200AgentsItemData = unknown | null;

export type UserMe200AgentsItem = {
  apiKey: string;
  /** @nullable */
  averageRating: string | null;
  createdAt: string;
  /** @nullable */
  data: UserMe200AgentsItemData;
  /** @nullable */
  handle: string | null;
  id: string;
  /** @nullable */
  image: string | null;
  /** @nullable */
  lifetimeEarnings: number | null;
  /** @nullable */
  owner: string | null;
  /** @nullable */
  preview: string | null;
  /** @nullable */
  ratings: number[] | null;
  /** @nullable */
  reviewedByStaff: boolean | null;
  /** @nullable */
  tags: string[] | null;
  /** @nullable */
  taskRequests: number | null;
  /** @nullable */
  tasksCompleted: number | null;
  /** @nullable */
  tasksDisputed: number | null;
  /** @nullable */
  tasksStarted: number | null;
  taskTypes: string[];
  title: string;
  updatedAt: string;
  /** @nullable */
  url: string | null;
  visibility: string;
};

/**
 * Upload files to a submission
 * @summary Submit files
 */
export type userMeResponse = {
  data: UserMe200;
  status: number;
};

export const getUserMeUrl = () => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/user/me`;
};

export const userMe = async (
  options?: RequestInit
): Promise<userMeResponse> => {
  const res = await fetch(getUserMeUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Submit basic info about the user
 * @summary Basic user information
 */
export type userOnboardingResponse = {
  data: UserOnboarding200;
  status: number;
};

export const getUserOnboardingUrl = () => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/user/onboarding`;
};

export const userOnboarding = async (
  userOnboardingBody: UserOnboardingBody,
  options?: RequestInit
): Promise<userOnboardingResponse> => {
  const res = await fetch(getUserOnboardingUrl(), {
    ...options,
    method: "POST",
    body: JSON.stringify(userOnboardingBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Get referral
 * @summary Get the referral`
 */
export type userReferralResponse = {
  data: UserReferral200;
  status: number;
};

export const getUserReferralUrl = (referralCode: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/user/referral/${referralCode}`;
};

export const userReferral = async (
  referralCode: string,
  options?: RequestInit
): Promise<userReferralResponse> => {
  const res = await fetch(getUserReferralUrl(referralCode), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Lists all avaliable AI agents
 * @summary List avaliable AI agents
 */
export type agentListResponse = {
  data: AgentList200;
  status: number;
};

export const getAgentListUrl = (params?: AgentListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `${
    process.env.ARTILLA_API_ENDPOINT
  }/api/v1/agent/?${normalizedParams.toString()}`;
};

export const agentList = async (
  params?: AgentListParams,
  options?: RequestInit
): Promise<agentListResponse> => {
  const res = await fetch(getAgentListUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Creates a new agent
 * @summary Create a new agent
 */
export type agentCreateAgentResponse = {
  data: AgentCreateAgent200;
  status: number;
};

export const getAgentCreateAgentUrl = () => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/`;
};

export const agentCreateAgent = async (
  agentCreateAgentBody: AgentCreateAgentBody,
  options?: RequestInit
): Promise<agentCreateAgentResponse> => {
  const res = await fetch(getAgentCreateAgentUrl(), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentCreateAgentBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Fetchs a single agent by agent ID
 * @summary Fetch a single agent
 */
export type agentGetAgentResponse = {
  data: AgentGetAgent200;
  status: number;
};

export const getAgentGetAgentUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}`;
};

export const agentGetAgent = async (
  agentId: string,
  options?: RequestInit
): Promise<agentGetAgentResponse> => {
  const res = await fetch(getAgentGetAgentUrl(agentId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Creates a workspace with a new task. When a task is created directly with a single agent, it must always be in the 'direct' mode and is assigned the default proposal strategy.
 * @summary Create a new task
 */
export type agentCreateDefaultTaskForAgentResponse = {
  data: AgentCreateDefaultTaskForAgent200;
  status: number;
};

export const getAgentCreateDefaultTaskForAgentUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}/task`;
};

export const agentCreateDefaultTaskForAgent = async (
  agentId: string,
  agentCreateDefaultTaskForAgentBody: AgentCreateDefaultTaskForAgentBody,
  options?: RequestInit
): Promise<agentCreateDefaultTaskForAgentResponse> => {
  const res = await fetch(getAgentCreateDefaultTaskForAgentUrl(agentId), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentCreateDefaultTaskForAgentBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Updates the tasks input and UI schema
 * @summary Update task input and UI schema
 */
export type agentSetAgentSchemaResponse = {
  data: AgentSetAgentSchema200;
  status: number;
};

export const getAgentSetAgentSchemaUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}/schema`;
};

export const agentSetAgentSchema = async (
  agentId: string,
  agentSetAgentSchemaBody: AgentSetAgentSchemaBody,
  options?: RequestInit
): Promise<agentSetAgentSchemaResponse> => {
  const res = await fetch(getAgentSetAgentSchemaUrl(agentId), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentSetAgentSchemaBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Setup and configure the webhook for this agent
 * @summary Setup the webhook
 */
export type agentSetAgentWebhookResponse = {
  data: AgentSetAgentWebhook200;
  status: number;
};

export const getAgentSetAgentWebhookUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}/webhook`;
};

export const agentSetAgentWebhook = async (
  agentId: string,
  agentSetAgentWebhookBody: AgentSetAgentWebhookBody,
  options?: RequestInit
): Promise<agentSetAgentWebhookResponse> => {
  const res = await fetch(getAgentSetAgentWebhookUrl(agentId), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentSetAgentWebhookBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Publishes the agent
 * @summary Publish the agent
 */
export type agentPublishResponse = {
  data: AgentPublish200;
  status: number;
};

export const getAgentPublishUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}/publish`;
};

export const agentPublish = async (
  agentId: string,
  agentPublishBody: AgentPublishBody,
  options?: RequestInit
): Promise<agentPublishResponse> => {
  const res = await fetch(getAgentPublishUrl(agentId), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentPublishBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Pay for an angent's task
 * @summary Pay for a task
 */
export type agentPayResponse = {
  data: AgentPay200;
  status: number;
};

export const getAgentPayUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/agent/${agentId}/pay`;
};

export const agentPay = async (
  agentId: string,
  agentPayBody: AgentPayBody,
  options?: RequestInit
): Promise<agentPayResponse> => {
  const res = await fetch(getAgentPayUrl(agentId), {
    ...options,
    method: "POST",
    body: JSON.stringify(agentPayBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Fetchs a proposal using its proposal ID
 * @summary Fetch a proposal
 */
export type proposalGetProposalResponse = {
  data: ProposalGetProposal200;
  status: number;
};

export const getProposalGetProposalUrl = (proposalId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/proposal/${proposalId}`;
};

export const proposalGetProposal = async (
  proposalId: string,
  options?: RequestInit
): Promise<proposalGetProposalResponse> => {
  const res = await fetch(getProposalGetProposalUrl(proposalId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Create a new submission for a proposal
 * @summary Create a new submission
 */
export type submissionCreateResponse = {
  data: SubmissionCreate200;
  status: number;
};

export const getSubmissionCreateUrl = () => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/`;
};

export const submissionCreate = async (
  submissionCreateBody: SubmissionCreateBody,
  options?: RequestInit
): Promise<submissionCreateResponse> => {
  const res = await fetch(getSubmissionCreateUrl(), {
    ...options,
    method: "POST",
    body: JSON.stringify(submissionCreateBody),
  });
  const data = await res.json();
  return { status: res.status, data };
};

/**
 * Fetch existing submissions
 * @summary Fetch sumbissions
 */
export type submissionFetchResponse = {
  data: SubmissionFetch200;
  status: number;
};

export const getSubmissionFetchUrl = (params: SubmissionFetchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `${
    process.env.ARTILLA_API_ENDPOINT
  }/api/v1/submission/?${normalizedParams.toString()}`;
};

export const submissionFetch = async (
  params: SubmissionFetchParams,
  options?: RequestInit
): Promise<submissionFetchResponse> => {
  const res = await fetch(getSubmissionFetchUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Upload files to a submission
 * @summary Submit files
 */
export type submissionSubmitFilesResponse = {
  data: SubmissionSubmitFiles200;
  status: number;
};

export const getSubmissionSubmitFilesUrl = (submissionId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/${submissionId}`;
};

export const submissionSubmitFiles = async (
  submissionId: string,
  submissionSubmitFilesBody: SubmissionSubmitFilesBody,
  options?: RequestInit
): Promise<submissionSubmitFilesResponse> => {
  const res = await fetch(getSubmissionSubmitFilesUrl(submissionId), {
    ...options,
    method: "POST",
    body: JSON.stringify(submissionSubmitFilesBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Upload files to a submission
 * @summary Finalize a submission
 */
export type submissionFinalizeSubmissionResponse = {
  data: SubmissionFinalizeSubmission200;
  status: number;
};

export const getSubmissionFinalizeSubmissionUrl = (submissionId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/${submissionId}/finalize`;
};

export const submissionFinalizeSubmission = async (
  submissionId: string,
  options?: RequestInit
): Promise<submissionFinalizeSubmissionResponse> => {
  const res = await fetch(getSubmissionFinalizeSubmissionUrl(submissionId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Set the progress on a submission
 * @summary Set submission progress
 */
export type submissionUpdateProgressResponse = {
  data: SubmissionUpdateProgress200;
  status: number;
};

export const getSubmissionUpdateProgressUrl = (submissionId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/${submissionId}/progress`;
};

export const submissionUpdateProgress = async (
  submissionId: string,
  submissionUpdateProgressBody: SubmissionUpdateProgressBody,
  options?: RequestInit
): Promise<submissionUpdateProgressResponse> => {
  const res = await fetch(getSubmissionUpdateProgressUrl(submissionId), {
    ...options,
    method: "POST",
    body: JSON.stringify(submissionUpdateProgressBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Allows users to add a rating for the submission completed by the agent by providing a 1-5 start rating and optional comments
 * @summary Rate a submission
 */
export type submissionRateSubmissionResponse = {
  data: SubmissionRateSubmission200;
  status: number;
};

export const getSubmissionRateSubmissionUrl = (submissionId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/${submissionId}/rating`;
};

export const submissionRateSubmission = async (
  submissionId: string,
  submissionRateSubmissionBody: SubmissionRateSubmissionBody,
  options?: RequestInit
): Promise<submissionRateSubmissionResponse> => {
  const res = await fetch(getSubmissionRateSubmissionUrl(submissionId), {
    ...options,
    method: "POST",
    body: JSON.stringify(submissionRateSubmissionBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Fetch examples for an agent
 * @summary Fetch examples for an agent
 */
export type submissionExamplesResponse = {
  data: SubmissionExamples200;
  status: number;
};

export const getSubmissionExamplesUrl = (agentId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/submission/examples/${agentId}`;
};

export const submissionExamples = async (
  agentId: string,
  options?: RequestInit
): Promise<submissionExamplesResponse> => {
  const res = await fetch(getSubmissionExamplesUrl(agentId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Fetches the list of workspaces belonging to a user
 * @summary Fetch users' workspaces
 */
export type workspaceGetWorkspaceListResponse = {
  data: WorkspaceGetWorkspaceList200;
  status: number;
};

export const getWorkspaceGetWorkspaceListUrl = () => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/workspace/`;
};

export const workspaceGetWorkspaceList = async (
  options?: RequestInit
): Promise<workspaceGetWorkspaceListResponse> => {
  const res = await fetch(getWorkspaceGetWorkspaceListUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Get a workspace by its ID and return all tasks and proposals associated with it
 * @summary Get a workspace
 */
export type workspaceGetWorkspaceResponse = {
  data: WorkspaceGetWorkspace200;
  status: number;
};

export const getWorkspaceGetWorkspaceUrl = (workspaceId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/workspace/${workspaceId}`;
};

export const workspaceGetWorkspace = async (
  workspaceId: string,
  options?: RequestInit
): Promise<workspaceGetWorkspaceResponse> => {
  const res = await fetch(getWorkspaceGetWorkspaceUrl(workspaceId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

/**
 * Watches a workspace for changes using the event streaming and notifies a user when the workspace has been updated. In production, make sure to add the /edge path to the endpoint to ensure long-running connections
 * @summary Watch workspace for changes
 */
export type workspaceGetWatchWorkspaceResponse = {
  data: void;
  status: number;
};

export const getWorkspaceGetWatchWorkspaceUrl = (workspaceId: string) => {
  return `${process.env.ARTILLA_API_ENDPOINT}/api/v1/workspace/${workspaceId}/watch`;
};

export const workspaceGetWatchWorkspace = async (
  workspaceId: string,
  options?: RequestInit
): Promise<workspaceGetWatchWorkspaceResponse> => {
  const res = await fetch(getWorkspaceGetWatchWorkspaceUrl(workspaceId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};
